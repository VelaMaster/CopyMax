/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;

import java.io.File;
import java.io.IOException;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import com.toedter.calendar.JCalendar;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Map;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;

public class Estadistica extends javax.swing.JPanel {
    
    private ChartPanel chartPanel;
    private JCalendar calendario;
    private JButton botonMostrar;
    private JPanel panelestadisticas;
    private JButton botonDescargar;
    /**
     * Creates new form Pedido
     */
    public Estadistica() {
        initComponents();
        cargarComponentes();
        
        addMostrarButtonListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LocalDate fechaSeleccionada = getSelectedDate();
                mostrarEstadisticas(fechaSeleccionada);
            }
        });
        
         addDescargarButtonListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                descargarGrafico();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelestadisticas = new javax.swing.JPanel();

        panelestadisticas.setBackground(new java.awt.Color(255, 204, 153));
        panelestadisticas.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelestadisticas, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelestadisticas, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
 private void cargarComponentes() {
        calendario = new JCalendar();
        botonMostrar = new JButton("Mostrar Ventas");
        botonDescargar = new JButton("Descargar Gráfico");

        JPanel controlPanel = new JPanel();
        controlPanel.setLayout(new BorderLayout());
        controlPanel.add(calendario, BorderLayout.CENTER);
        controlPanel.add(botonMostrar, BorderLayout.SOUTH);
        controlPanel.add(botonDescargar, BorderLayout.NORTH);

        panelestadisticas.add(controlPanel, BorderLayout.WEST);
    }

     public void mostrarGrafica(Map<Integer, Double> ventasPorHora) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int hora = 8; hora <= 20; hora++) {
            Double ventas = ventasPorHora.getOrDefault(hora, 0.0);
            dataset.addValue(ventas, "Ventas", hora + ":00 - " + (hora + 1) + ":00");
            System.out.println("Hora: " + hora + ", Ventas: " + ventas);  // Debug
        }

        JFreeChart chart = ChartFactory.createBarChart(
                "Ventas por Hora",
                "Hora del Día",
                "Total Ventas",
                dataset
        );

        CategoryAxis domainAxis = chart.getCategoryPlot().getDomainAxis();
        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45); // Rotar las etiquetas

        if (chartPanel != null) {
            panelestadisticas.remove(chartPanel);
        }

        chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(800, 520)); // Ajustar tamaño del gráfico
        panelestadisticas.add(chartPanel, BorderLayout.CENTER);
        revalidate();
        repaint();
    }


    public LocalDate getSelectedDate() {
        return calendario.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }

    public void addMostrarButtonListener(ActionListener listener) {
        botonMostrar.addActionListener(listener);
    }
    
    public void addDescargarButtonListener(ActionListener listener) {
        botonDescargar.addActionListener(listener);
    }

    private void mostrarEstadisticas(LocalDate fecha) {
    Ventaporhora modelo = new Ventaporhora();
    Map<Integer, Double> ventasPorHora = modelo.obtenerVentasPorHora(fecha);
    System.out.println("Datos de ventas por hora: " + ventasPorHora);  // Debug
    mostrarGrafica(ventasPorHora);
}
   private void descargarGrafico() {
    if (chartPanel != null) {
        JFreeChart chart = chartPanel.getChart();
        try {
            // Crear el directorio si no existe
            File directorio = new File("Graficas");
            if (!directorio.exists()) {
                directorio.mkdirs();
            }

            // Guardar el archivo en la carpeta especificada
            File archivo = new File(directorio, "VentasPorHora.png" +java.time.LocalDateTime.now().toString().replace(":", "-"));
            ChartUtils.saveChartAsPNG(archivo, chart, 800, 520);
            JOptionPane.showMessageDialog(this, "Gráfico descargado exitosamente en " + archivo.getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al descargar el gráfico: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "No hay gráfico para descargar.");
    }
}
}
